// Generated by gencpp from file arlo_control_msgs/WheelsPower.msg
// DO NOT EDIT!


#ifndef ARLO_CONTROL_MSGS_MESSAGE_WHEELSPOWER_H
#define ARLO_CONTROL_MSGS_MESSAGE_WHEELSPOWER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arlo_control_msgs
{
template <class ContainerAllocator>
struct WheelsPower_
{
  typedef WheelsPower_<ContainerAllocator> Type;

  WheelsPower_()
    : left_power(0.0)
    , right_power(0.0)  {
    }
  WheelsPower_(const ContainerAllocator& _alloc)
    : left_power(0.0)
    , right_power(0.0)  {
  (void)_alloc;
    }



   typedef float _left_power_type;
  _left_power_type left_power;

   typedef float _right_power_type;
  _right_power_type right_power;





  typedef boost::shared_ptr< ::arlo_control_msgs::WheelsPower_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arlo_control_msgs::WheelsPower_<ContainerAllocator> const> ConstPtr;

}; // struct WheelsPower_

typedef ::arlo_control_msgs::WheelsPower_<std::allocator<void> > WheelsPower;

typedef boost::shared_ptr< ::arlo_control_msgs::WheelsPower > WheelsPowerPtr;
typedef boost::shared_ptr< ::arlo_control_msgs::WheelsPower const> WheelsPowerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arlo_control_msgs::WheelsPower_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arlo_control_msgs::WheelsPower_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arlo_control_msgs::WheelsPower_<ContainerAllocator1> & lhs, const ::arlo_control_msgs::WheelsPower_<ContainerAllocator2> & rhs)
{
  return lhs.left_power == rhs.left_power &&
    lhs.right_power == rhs.right_power;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arlo_control_msgs::WheelsPower_<ContainerAllocator1> & lhs, const ::arlo_control_msgs::WheelsPower_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arlo_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::arlo_control_msgs::WheelsPower_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arlo_control_msgs::WheelsPower_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arlo_control_msgs::WheelsPower_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arlo_control_msgs::WheelsPower_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arlo_control_msgs::WheelsPower_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arlo_control_msgs::WheelsPower_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arlo_control_msgs::WheelsPower_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d0b7242d8f72aed6c30a68230134b361";
  }

  static const char* value(const ::arlo_control_msgs::WheelsPower_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd0b7242d8f72aed6ULL;
  static const uint64_t static_value2 = 0xc30a68230134b361ULL;
};

template<class ContainerAllocator>
struct DataType< ::arlo_control_msgs::WheelsPower_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arlo_control_msgs/WheelsPower";
  }

  static const char* value(const ::arlo_control_msgs::WheelsPower_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arlo_control_msgs::WheelsPower_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 left_power\n"
"float32 right_power\n"
;
  }

  static const char* value(const ::arlo_control_msgs::WheelsPower_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arlo_control_msgs::WheelsPower_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left_power);
      stream.next(m.right_power);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WheelsPower_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arlo_control_msgs::WheelsPower_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arlo_control_msgs::WheelsPower_<ContainerAllocator>& v)
  {
    s << indent << "left_power: ";
    Printer<float>::stream(s, indent + "  ", v.left_power);
    s << indent << "right_power: ";
    Printer<float>::stream(s, indent + "  ", v.right_power);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARLO_CONTROL_MSGS_MESSAGE_WHEELSPOWER_H
