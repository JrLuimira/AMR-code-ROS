// Generated by gencpp from file arlo_control_msgs/WheelsEncoders.msg
// DO NOT EDIT!


#ifndef ARLO_CONTROL_MSGS_MESSAGE_WHEELSENCODERS_H
#define ARLO_CONTROL_MSGS_MESSAGE_WHEELSENCODERS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arlo_control_msgs
{
template <class ContainerAllocator>
struct WheelsEncoders_
{
  typedef WheelsEncoders_<ContainerAllocator> Type;

  WheelsEncoders_()
    : left_encoder(0)
    , right_encoder(0)  {
    }
  WheelsEncoders_(const ContainerAllocator& _alloc)
    : left_encoder(0)
    , right_encoder(0)  {
  (void)_alloc;
    }



   typedef int16_t _left_encoder_type;
  _left_encoder_type left_encoder;

   typedef int16_t _right_encoder_type;
  _right_encoder_type right_encoder;





  typedef boost::shared_ptr< ::arlo_control_msgs::WheelsEncoders_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arlo_control_msgs::WheelsEncoders_<ContainerAllocator> const> ConstPtr;

}; // struct WheelsEncoders_

typedef ::arlo_control_msgs::WheelsEncoders_<std::allocator<void> > WheelsEncoders;

typedef boost::shared_ptr< ::arlo_control_msgs::WheelsEncoders > WheelsEncodersPtr;
typedef boost::shared_ptr< ::arlo_control_msgs::WheelsEncoders const> WheelsEncodersConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arlo_control_msgs::WheelsEncoders_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arlo_control_msgs::WheelsEncoders_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arlo_control_msgs::WheelsEncoders_<ContainerAllocator1> & lhs, const ::arlo_control_msgs::WheelsEncoders_<ContainerAllocator2> & rhs)
{
  return lhs.left_encoder == rhs.left_encoder &&
    lhs.right_encoder == rhs.right_encoder;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arlo_control_msgs::WheelsEncoders_<ContainerAllocator1> & lhs, const ::arlo_control_msgs::WheelsEncoders_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arlo_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::arlo_control_msgs::WheelsEncoders_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arlo_control_msgs::WheelsEncoders_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arlo_control_msgs::WheelsEncoders_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arlo_control_msgs::WheelsEncoders_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arlo_control_msgs::WheelsEncoders_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arlo_control_msgs::WheelsEncoders_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arlo_control_msgs::WheelsEncoders_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ae7edf4b550f559fc15efc7c4191da0d";
  }

  static const char* value(const ::arlo_control_msgs::WheelsEncoders_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xae7edf4b550f559fULL;
  static const uint64_t static_value2 = 0xc15efc7c4191da0dULL;
};

template<class ContainerAllocator>
struct DataType< ::arlo_control_msgs::WheelsEncoders_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arlo_control_msgs/WheelsEncoders";
  }

  static const char* value(const ::arlo_control_msgs::WheelsEncoders_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arlo_control_msgs::WheelsEncoders_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 left_encoder\n"
"int16 right_encoder\n"
;
  }

  static const char* value(const ::arlo_control_msgs::WheelsEncoders_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arlo_control_msgs::WheelsEncoders_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left_encoder);
      stream.next(m.right_encoder);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WheelsEncoders_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arlo_control_msgs::WheelsEncoders_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arlo_control_msgs::WheelsEncoders_<ContainerAllocator>& v)
  {
    s << indent << "left_encoder: ";
    Printer<int16_t>::stream(s, indent + "  ", v.left_encoder);
    s << indent << "right_encoder: ";
    Printer<int16_t>::stream(s, indent + "  ", v.right_encoder);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARLO_CONTROL_MSGS_MESSAGE_WHEELSENCODERS_H
