// Generated by gencpp from file pedsim_msgs/FrozenAgent.msg
// DO NOT EDIT!


#ifndef PEDSIM_MSGS_MESSAGE_FROZENAGENT_H
#define PEDSIM_MSGS_MESSAGE_FROZENAGENT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pedsim_msgs
{
template <class ContainerAllocator>
struct FrozenAgent_
{
  typedef FrozenAgent_<ContainerAllocator> Type;

  FrozenAgent_()
    : id(0)
    , is_frozen()  {
    }
  FrozenAgent_(const ContainerAllocator& _alloc)
    : id(0)
    , is_frozen(_alloc)  {
  (void)_alloc;
    }



   typedef uint64_t _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _is_frozen_type;
  _is_frozen_type is_frozen;





  typedef boost::shared_ptr< ::pedsim_msgs::FrozenAgent_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pedsim_msgs::FrozenAgent_<ContainerAllocator> const> ConstPtr;

}; // struct FrozenAgent_

typedef ::pedsim_msgs::FrozenAgent_<std::allocator<void> > FrozenAgent;

typedef boost::shared_ptr< ::pedsim_msgs::FrozenAgent > FrozenAgentPtr;
typedef boost::shared_ptr< ::pedsim_msgs::FrozenAgent const> FrozenAgentConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pedsim_msgs::FrozenAgent_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pedsim_msgs::FrozenAgent_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pedsim_msgs::FrozenAgent_<ContainerAllocator1> & lhs, const ::pedsim_msgs::FrozenAgent_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.is_frozen == rhs.is_frozen;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pedsim_msgs::FrozenAgent_<ContainerAllocator1> & lhs, const ::pedsim_msgs::FrozenAgent_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pedsim_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pedsim_msgs::FrozenAgent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pedsim_msgs::FrozenAgent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pedsim_msgs::FrozenAgent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pedsim_msgs::FrozenAgent_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pedsim_msgs::FrozenAgent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pedsim_msgs::FrozenAgent_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pedsim_msgs::FrozenAgent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1e0c4433c6bc945e87d70dd219bfcaa7";
  }

  static const char* value(const ::pedsim_msgs::FrozenAgent_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1e0c4433c6bc945eULL;
  static const uint64_t static_value2 = 0x87d70dd219bfcaa7ULL;
};

template<class ContainerAllocator>
struct DataType< ::pedsim_msgs::FrozenAgent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pedsim_msgs/FrozenAgent";
  }

  static const char* value(const ::pedsim_msgs::FrozenAgent_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pedsim_msgs::FrozenAgent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64 id\n"
"string is_frozen\n"
;
  }

  static const char* value(const ::pedsim_msgs::FrozenAgent_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pedsim_msgs::FrozenAgent_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.is_frozen);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FrozenAgent_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pedsim_msgs::FrozenAgent_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pedsim_msgs::FrozenAgent_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.id);
    s << indent << "is_frozen: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.is_frozen);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PEDSIM_MSGS_MESSAGE_FROZENAGENT_H
