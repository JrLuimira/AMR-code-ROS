// Generated by gencpp from file pedsim_msgs/FrozenAgents.msg
// DO NOT EDIT!


#ifndef PEDSIM_MSGS_MESSAGE_FROZENAGENTS_H
#define PEDSIM_MSGS_MESSAGE_FROZENAGENTS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <pedsim_msgs/FrozenAgent.h>

namespace pedsim_msgs
{
template <class ContainerAllocator>
struct FrozenAgents_
{
  typedef FrozenAgents_<ContainerAllocator> Type;

  FrozenAgents_()
    : frozen_agents()  {
    }
  FrozenAgents_(const ContainerAllocator& _alloc)
    : frozen_agents(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::pedsim_msgs::FrozenAgent_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::pedsim_msgs::FrozenAgent_<ContainerAllocator> >> _frozen_agents_type;
  _frozen_agents_type frozen_agents;





  typedef boost::shared_ptr< ::pedsim_msgs::FrozenAgents_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pedsim_msgs::FrozenAgents_<ContainerAllocator> const> ConstPtr;

}; // struct FrozenAgents_

typedef ::pedsim_msgs::FrozenAgents_<std::allocator<void> > FrozenAgents;

typedef boost::shared_ptr< ::pedsim_msgs::FrozenAgents > FrozenAgentsPtr;
typedef boost::shared_ptr< ::pedsim_msgs::FrozenAgents const> FrozenAgentsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pedsim_msgs::FrozenAgents_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pedsim_msgs::FrozenAgents_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pedsim_msgs::FrozenAgents_<ContainerAllocator1> & lhs, const ::pedsim_msgs::FrozenAgents_<ContainerAllocator2> & rhs)
{
  return lhs.frozen_agents == rhs.frozen_agents;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pedsim_msgs::FrozenAgents_<ContainerAllocator1> & lhs, const ::pedsim_msgs::FrozenAgents_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pedsim_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pedsim_msgs::FrozenAgents_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pedsim_msgs::FrozenAgents_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pedsim_msgs::FrozenAgents_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pedsim_msgs::FrozenAgents_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pedsim_msgs::FrozenAgents_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pedsim_msgs::FrozenAgents_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pedsim_msgs::FrozenAgents_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bf5a91789a8ae7b84c040342c231bbb0";
  }

  static const char* value(const ::pedsim_msgs::FrozenAgents_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbf5a91789a8ae7b8ULL;
  static const uint64_t static_value2 = 0x4c040342c231bbb0ULL;
};

template<class ContainerAllocator>
struct DataType< ::pedsim_msgs::FrozenAgents_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pedsim_msgs/FrozenAgents";
  }

  static const char* value(const ::pedsim_msgs::FrozenAgents_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pedsim_msgs::FrozenAgents_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pedsim_msgs/FrozenAgent[] frozen_agents\n"
"================================================================================\n"
"MSG: pedsim_msgs/FrozenAgent\n"
"uint64 id\n"
"string is_frozen\n"
;
  }

  static const char* value(const ::pedsim_msgs::FrozenAgents_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pedsim_msgs::FrozenAgents_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frozen_agents);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FrozenAgents_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pedsim_msgs::FrozenAgents_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pedsim_msgs::FrozenAgents_<ContainerAllocator>& v)
  {
    s << indent << "frozen_agents[]" << std::endl;
    for (size_t i = 0; i < v.frozen_agents.size(); ++i)
    {
      s << indent << "  frozen_agents[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::pedsim_msgs::FrozenAgent_<ContainerAllocator> >::stream(s, indent + "    ", v.frozen_agents[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PEDSIM_MSGS_MESSAGE_FROZENAGENTS_H
