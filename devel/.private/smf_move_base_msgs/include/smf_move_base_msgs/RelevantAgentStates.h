// Generated by gencpp from file smf_move_base_msgs/RelevantAgentStates.msg
// DO NOT EDIT!


#ifndef SMF_MOVE_BASE_MSGS_MESSAGE_RELEVANTAGENTSTATES_H
#define SMF_MOVE_BASE_MSGS_MESSAGE_RELEVANTAGENTSTATES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <smf_move_base_msgs/RelevantAgentState.h>

namespace smf_move_base_msgs
{
template <class ContainerAllocator>
struct RelevantAgentStates_
{
  typedef RelevantAgentStates_<ContainerAllocator> Type;

  RelevantAgentStates_()
    : relevant_agent_states()  {
    }
  RelevantAgentStates_(const ContainerAllocator& _alloc)
    : relevant_agent_states(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::smf_move_base_msgs::RelevantAgentState_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::smf_move_base_msgs::RelevantAgentState_<ContainerAllocator> >> _relevant_agent_states_type;
  _relevant_agent_states_type relevant_agent_states;





  typedef boost::shared_ptr< ::smf_move_base_msgs::RelevantAgentStates_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::smf_move_base_msgs::RelevantAgentStates_<ContainerAllocator> const> ConstPtr;

}; // struct RelevantAgentStates_

typedef ::smf_move_base_msgs::RelevantAgentStates_<std::allocator<void> > RelevantAgentStates;

typedef boost::shared_ptr< ::smf_move_base_msgs::RelevantAgentStates > RelevantAgentStatesPtr;
typedef boost::shared_ptr< ::smf_move_base_msgs::RelevantAgentStates const> RelevantAgentStatesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::smf_move_base_msgs::RelevantAgentStates_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::smf_move_base_msgs::RelevantAgentStates_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::smf_move_base_msgs::RelevantAgentStates_<ContainerAllocator1> & lhs, const ::smf_move_base_msgs::RelevantAgentStates_<ContainerAllocator2> & rhs)
{
  return lhs.relevant_agent_states == rhs.relevant_agent_states;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::smf_move_base_msgs::RelevantAgentStates_<ContainerAllocator1> & lhs, const ::smf_move_base_msgs::RelevantAgentStates_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace smf_move_base_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::smf_move_base_msgs::RelevantAgentStates_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::smf_move_base_msgs::RelevantAgentStates_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smf_move_base_msgs::RelevantAgentStates_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smf_move_base_msgs::RelevantAgentStates_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smf_move_base_msgs::RelevantAgentStates_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smf_move_base_msgs::RelevantAgentStates_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::smf_move_base_msgs::RelevantAgentStates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9e89de4f92120f96c89e3dcd2111198d";
  }

  static const char* value(const ::smf_move_base_msgs::RelevantAgentStates_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9e89de4f92120f96ULL;
  static const uint64_t static_value2 = 0xc89e3dcd2111198dULL;
};

template<class ContainerAllocator>
struct DataType< ::smf_move_base_msgs::RelevantAgentStates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "smf_move_base_msgs/RelevantAgentStates";
  }

  static const char* value(const ::smf_move_base_msgs::RelevantAgentStates_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::smf_move_base_msgs::RelevantAgentStates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "smf_move_base_msgs/RelevantAgentState[] relevant_agent_states\n"
"================================================================================\n"
"MSG: smf_move_base_msgs/RelevantAgentState\n"
"Header header\n"
"pedsim_msgs/AgentState agent_state\n"
"int8 relevance\n"
"uint64 last_time\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: pedsim_msgs/AgentState\n"
"Header header\n"
"uint64 id\n"
"uint16 type\n"
"string social_state\n"
"geometry_msgs/Pose pose\n"
"geometry_msgs/Twist twist\n"
"pedsim_msgs/AgentForce forces\n"
"\n"
"# Use sensors package to control observability\n"
"\n"
"# Social State string constants\n"
"string      TYPE_STANDING = \"standing\"\n"
"string      TYPE_INDIVIDUAL_MOVING = \"individual_moving\"\n"
"string      TYPE_WAITING_IN_QUEUE = \"waiting_in_queue\"\n"
"string      TYPE_GROUP_MOVING = \"group_moving\"\n"
"string      TYPE_FROZEN = \"frozen\"\n"
"\n"
"# Agent types\n"
"# 0, 1 -> ordinary agents\n"
"# 2 -> Robot\n"
"# 3 -> standing/elderly agents\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: pedsim_msgs/AgentForce\n"
"# Forces acting on an agent.\n"
"\n"
"# Basic SFM forces.\n"
"geometry_msgs/Vector3 desired_force\n"
"geometry_msgs/Vector3 obstacle_force\n"
"geometry_msgs/Vector3 social_force\n"
"\n"
"# Additional Group Forces\n"
"geometry_msgs/Vector3 group_coherence_force\n"
"geometry_msgs/Vector3 group_gaze_force\n"
"geometry_msgs/Vector3 group_repulsion_force\n"
"\n"
"# Extra stabilization/custom forces.\n"
"geometry_msgs/Vector3 random_force\n"
;
  }

  static const char* value(const ::smf_move_base_msgs::RelevantAgentStates_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::smf_move_base_msgs::RelevantAgentStates_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.relevant_agent_states);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RelevantAgentStates_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::smf_move_base_msgs::RelevantAgentStates_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::smf_move_base_msgs::RelevantAgentStates_<ContainerAllocator>& v)
  {
    s << indent << "relevant_agent_states[]" << std::endl;
    for (size_t i = 0; i < v.relevant_agent_states.size(); ++i)
    {
      s << indent << "  relevant_agent_states[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::smf_move_base_msgs::RelevantAgentState_<ContainerAllocator> >::stream(s, indent + "    ", v.relevant_agent_states[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SMF_MOVE_BASE_MSGS_MESSAGE_RELEVANTAGENTSTATES_H
