;; Auto-generated. Do not edit!


(when (boundp 'smf_move_base_msgs::GotoRegion2DGoal)
  (if (not (find-package "SMF_MOVE_BASE_MSGS"))
    (make-package "SMF_MOVE_BASE_MSGS"))
  (shadow 'GotoRegion2DGoal (find-package "SMF_MOVE_BASE_MSGS")))
(unless (find-package "SMF_MOVE_BASE_MSGS::GOTOREGION2DGOAL")
  (make-package "SMF_MOVE_BASE_MSGS::GOTOREGION2DGOAL"))

(in-package "ROS")
;;//! \htmlinclude GotoRegion2DGoal.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))


(defclass smf_move_base_msgs::GotoRegion2DGoal
  :super ros::object
  :slots (_goal _radius ))

(defmethod smf_move_base_msgs::GotoRegion2DGoal
  (:init
   (&key
    ((:goal __goal) (instance geometry_msgs::Pose2D :init))
    ((:radius __radius) 0.0)
    )
   (send-super :init)
   (setq _goal __goal)
   (setq _radius (float __radius))
   self)
  (:goal
   (&rest __goal)
   (if (keywordp (car __goal))
       (send* _goal __goal)
     (progn
       (if __goal (setq _goal (car __goal)))
       _goal)))
  (:radius
   (&optional __radius)
   (if __radius (setq _radius __radius)) _radius)
  (:serialization-length
   ()
   (+
    ;; geometry_msgs/Pose2D _goal
    (send _goal :serialization-length)
    ;; float32 _radius
    4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; geometry_msgs/Pose2D _goal
       (send _goal :serialize s)
     ;; float32 _radius
       (sys::poke _radius (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; geometry_msgs/Pose2D _goal
     (send _goal :deserialize buf ptr-) (incf ptr- (send _goal :serialization-length))
   ;; float32 _radius
     (setq _radius (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;;
   self)
  )

(setf (get smf_move_base_msgs::GotoRegion2DGoal :md5sum-) "f655c547d9d6f2aa2a82fedd5d1209db")
(setf (get smf_move_base_msgs::GotoRegion2DGoal :datatype-) "smf_move_base_msgs/GotoRegion2DGoal")
(setf (get smf_move_base_msgs::GotoRegion2DGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal definition
geometry_msgs/Pose2D goal
float32 radius

================================================================================
MSG: geometry_msgs/Pose2D
# Deprecated
# Please use the full 3D pose.

# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.

# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.


# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta

")



(provide :smf_move_base_msgs/GotoRegion2DGoal "f655c547d9d6f2aa2a82fedd5d1209db")


